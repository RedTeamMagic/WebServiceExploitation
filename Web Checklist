Web Page, Port 80, 443 or other (8080, 8443, etc)
- Searchsploit service name 
- Searchsploit version number 
- View Page source for name & # (most applications are not written by hand) 
- Nikto 
   nikto -host x.x.x.x 
Discover hidden content, additional logins, and administrative interfaces:
- Dirbuster 
   - Common wordlist - including file types 
   - Medium wordlist (directory-2.3-medium)
      - if that doesn't work:
      - Be recursive 
      - Brute force file types 
   - Cewl 
Use a secondary brute force tool to ensure none are missed
- Gobuster
    gobuster dir -u http://x.x.x.x/starting/log/ -w /usr/share/wordlists/dirb/common.txt
- Check for files or locations in Robots.txt 
- Check for HTTPS:// on any port number 
- Try A Different VERB, IE Post request to login page 
- Change host name in /etc/hosts and try again
 
  
If login page exists 
- Try default creds 
    Google: [service name] default creds
            [service name] default login
            [service name] default credentials
            [service name] installation login 
            * try above with filetype:pdf
- Burp capture login request 
     - Check for unique tokens
     - Check for what a normal login looks like
     - Questions to answer:
         Is it a post or get?
         Does the page redirect?
         What characters are encoded in username/email/password ie @.=!#
- Burp intruder bruteforce
    - Send special characters in both fields and observe which are encoded
    - Match that encoding otherwise all attempts will fail
    - Follow redirects incase of multi redirect login
    - Sort results by different fields to find anomalies (errors or successful logins)
    - Battering ram with user list and wordlist
         Rockyou.txt
         Fasttrack
-Hyrda bruteforce with default user 
    hydra -[ l | L ] <login | list> -[ p | P] <password | list> -t <threads> <ip> <format [http-post-form usually]> “<page>:<parameters>:<failed text>” 
   - Cewl 
   - Rockyou.txt 
- View Page Source 
- Sqlmap 
